# https://stackoverflow.com/questions/12921452/android-download-a-single-file-in-many-parts




fun encryptFile() {
        try {
            val key = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDRF"
            val cipher = Cipher.getInstance("AES/GCM/NoPadding")
            val skey = SecretKeySpec(key.toByteArray(Charset.defaultCharset()), "AES")
            cipher.init(Cipher.ENCRYPT_MODE, skey, GCMParameterSpec(128, ByteArray(12)))

            val fis = FileInputStream("/sdcard/ota.zip")
            val fos = FileOutputStream(File("/sdcard/ota_test.bin"))
            val cos = CipherOutputStream(fos, cipher)
            var b : Int
            val d = ByteArray(1024)
            while (fis.read(d).also { b = it } != -1) {
                cos.write(d, 0, b)
                cos.flush()
            }
            cos.flush()
            cos.close()
            fis.close()

            Log.d("AAAAAAAAAAAA", "DONE")
        } catch (e: Exception) {
            e.printStackTrace()
        }

    }


        fun parse(inputFile: File): ConfigFirmware {
            var result = ConfigFirmware()
            try {
                val parserFactory = XmlPullParserFactory.newInstance()
                parserFactory.isNamespaceAware = true
                val parser: XmlPullParser = parserFactory.newPullParser()
                parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true)
                parser.setInput(FileInputStream(inputFile), null)
                result = processingParse(parser)
            } catch (e: Exception) {
                e.printStackTrace()
            }
            return result
        }


        fun processingParse(parser: XmlPullParser): ConfigFirmware {
            val result = ConfigFirmware()
            val firmwares = ArrayList<InfoFirmware>()
            val ids = ArrayList<String>()
            var firmware: InfoFirmware? = null
            var tag: String?
            var text: String? = ""
            var event = parser.eventType
            var packageInfoType = 0
            while (event != XmlPullParser.END_DOCUMENT) {
                tag = parser.name
                when (event) {
                    XmlPullParser.START_TAG -> {
                        LogManager.d(tag)
                        if (tag == "information" && parser.attributeCount > 0) {
                            packageInfoType = 0
                            result.version = parser.getAttributeValue(null, "version")
                        }
                        if (tag == "firmwares") {
                            packageInfoType = 1
                        }
                    }
                    XmlPullParser.TEXT -> text = parser.text
                    XmlPullParser.END_TAG -> {
                        LogManager.d("tag = $tag, text = $text")
                        when (packageInfoType) {
                            0 -> {
                                when {
                                    tag == "date-time" -> {
                                        result.date = text
                                    }
                                    tag == "path" -> {
                                        result.path = text
                                    }
                                    tag == "checksum" -> {
                                        result.checksum = text
                                    }
                                    tag == "id" && text != null && text.trim().isNotEmpty() -> {
                                        ids.add(text.trim())
                                    }
                                }
                            }
                            else -> {
                                when (tag) {
                                    "firmware" -> {
                                        if (parser.attributeCount > 0) {
                                            val type = parser.getAttributeValue(null, "type")
                                            firmware = InfoFirmware(type)
                                            val version = parser.getAttributeValue(null, "version")
                                            firmware.version = version
                                        }
                                    }
                                    "path" -> {
                                        firmware?.path = text
                                    }
                                    "checksum" -> {
                                        firmware?.checksum = text
                                    }
                                    else -> {
                                        LogManager.d("XML Skip")
                                    }
                                }
                                if (firmware != null) {
                                    firmwares.add(firmware)
                                }
                            }
                        }
                    }
                }
                event = parser.next()
            }
            result.firmwares = firmwares
            result.kioskIds = ids
            return result
        }

